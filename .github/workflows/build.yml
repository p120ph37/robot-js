name: Build
on: [push]
env:
  HOST_NODE_VERSION: 14.4.0
jobs:
  build:
    strategy:
      matrix:
        os:
          - windows-2019
          - ubuntu-18.04
          - macos-10.15
        arch:
          - 64
          - 32
        runtime_target:
          - node-14.4.0
          - node-13.12.0
          - node-12.18.1
          - node-11.15.0
          - node-10.21.0
          - node-9.11.2
          - node-8.17.0
          - electron-10.1.7
          - electron-10.0.1
          - electron-9.3.5
          - electron-9.2.1
          - electron-9.1.2
          - electron-9.0.5
          - electron-8.5.5
          - electron-8.4.1
          - electron-8.3.4
          - electron-8.2.5
          - electron-8.1.1
          - electron-8.0.3
        exclude:
          - os: ubuntu-18.04
            arch: 32
          - os: macos-10.15
            arch: 32
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: |
          echo NVM_HOME=$env:ProgramData\nvm | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo NVM_SYMLINK=$env:ProgramFiles\nodejs | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo $env:ProgramData\nvm | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Remove-Item $env:ProgramFiles\nodejs -Recurse -Force -ErrorAction SilentlyContinue
      - if: ${{ runner.os == 'Windows' }}
        uses: actions/cache@v1
        with:
          path: ${{ env.NVM_HOME }}
          key: nvm-windows
      - if: ${{ runner.os == 'Linux' }}
        run: |
          echo NVM_HOME=$HOME/.nvm >>$GITHUB_ENV
          sudo apt-get install libxinerama-dev libxtst-dev
      - if: ${{ runner.os == 'macOS' }}
        run: |
          echo NVM_HOME=$HOME/.nvm >>$GITHUB_ENV
          echo PYTHON=/usr/local/bin/python >>$GITHUB_ENV
      - uses: actions/checkout@v1
        with: 
          submodules: recursive
      - env:
          RUNTIME_TARGET: ${{ matrix.runtime_target }}
          ARCH: ${{ matrix.arch }}
        run: |
          [ -e "$NVM_HOME/nvm.sh" ] || which nvm || choco install nvm
          [ -e "$NVM_HOME/nvm.sh" ] && . "$NVM_HOME/nvm.sh"
          nvm install $HOST_NODE_VERSION $ARCH
          nvm use $HOST_NODE_VERSION $ARCH && sleep 3
          npm ci --ignore-scripts
          case $RUNTIME_TARGET in
            node-*)
              npm run build -- \
                --runtime=node \
                --target=${RUNTIME_TARGET#*-}
              nvm install ${RUNTIME_TARGET#*-} $ARCH
              nvm use ${RUNTIME_TARGET#*-} $ARCH && sleep 3
              npm run test:ci:node
              ;;
            electron-*)
              npm run build -- \
                --runtime=electron \
                --target=${RUNTIME_TARGET#*-} \
                --dist-url=https://atom.io/download/electron
              npm install --no-save electron@${RUNTIME_TARGET#*-}
              if which xvfb-run; then
                xvfb-run npm run test:ci:electron
              else
                npm run test:ci:electron
              fi
              ;;
          esac
      - uses: actions/upload-artifact@v2
        with:
          path: build/stage/*/*.tar.gz
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo NPM_CACHE=$HOME/.npm >>$GITHUB_ENV
      - uses: actions/cache@v1
        with:
          path: ${{ env.NPM_CACHE }}
          key: npm-linux
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: build/stage
      - run: |
          npm ci --ignore-scripts
          GITHUB_TOKEN=${{ github.token }} npm run release
